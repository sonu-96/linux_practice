## What are processes in Linux?

Before we begin, let us look at what the word process even means, in layman’s terms, a process is a series of steps taken to do something. In computer science the definition of ‘something’ changes.

A process is a program in execution. It consists of the data read from files, input from a user, program instructions, and many more.

A process in Linux starts every time you start an application or run a program or command. A program or command creates only one process, but an application on the other hand has the capability to start multiple processes to accomplish various tasks.

The term process cannot be more straightforward than this, let us now deep dive into the various technical aspects of processes.
### Types of rocesses in Linux

In Linux, processes are of 2 types, let us go through each of them:

1. Foreground processes
Foreground processes are also called as interactive processes. These processes are launched and controlled through the command line in a terminal session. There has to be a user in the system to start such foreground processes as they cannot start automatically by themselves.

2. Background processes
Background processes are also called as non-interactive processes. These processes are the complete opposite of the Foreground process. They don’t need any user input and are not connected to the terminal. One such example of background processes is daemons.

### What are Daemons?
Since we touched on the topic of Daemons, might as well learn what they are. Daemons are a special type of background process that starts when the system boots and keeps running forever, till eternity — they never die. Daemons can be controlled by a user through the init process

process state in linux

### What is an init process?
Now, what on earth is an init process you may ask, well it is a parent of all the processes that are happening in the system. The init process is the very first program that is executed when the system starts up and it is started by the kernel itself. Since the init process is the holy mother of all processes, it manages all the processes on the system, and it does not have a parent.
Linux Child and parent processes
Before we proceed further, let us get our terminology straight, let us look at what the terms child process and parent process mean.

### Parent process in Linux
These are the processes that create other processes.

### Child process in Linux
These are the processes that are created by other processes.

### How are processes created in Linux?
In Linux, a process is normally created when an application or program makes an exact copy of itself in the memory. The child process will have the exact environment ad that of the parent process. The only difference between them is the ID number.

In Linux, there are 2 ways of creating a new process, let us look at them:

1. system()
The first method of creating a process in Linux is by using the function system(). This on the easiest of the 2 methods, however, it has security risks and is inefficient.
2. fork() / exec()
The second method of creating a process in Linux is by using either the fork() function or the exec() function. This method is slightly advanced yet is more flexible. It also offers security and speed.

How does Linux identify processes?
Why did we ask this question in the first place, Linux is the greatest of the greatest operating system, and yet here we are questioning its abilities?

Well, we are asking this question to get a better understanding of how Linux works, because if you see Linux is a multi-user system and different users can be running different applications and programs and each actuation of a program must be identified by the Linux kernel.

Linux identifies processes by a unique ID given to processes called PID (process identity) and PPID (parent process identity), as simple as that.

Life cycle of a process in Linux
Now that we already know different stuff like Daemons, parents and child processes, types of processes, PID, PPID, and more, let us go through the different stages a process goes through in its lifecycle, straight from its creation to the point where it turns into a zombie (no pun intended).

1. Creation
We already saw how a process is created, so let us skip this part and se what happens after the creation of a process.


2. Running
In this stage, a process is either up and running or ready to run, meaning it is waiting to be assigned to one of the CPUs.

3. Waiting
In this phase, the process is waiting for something (or an event) to occur. It could also be waiting for a particular system resource.

4. Stopped
In this phase, a process is stopped. Processes usually stop by receiving a signal.

5. Zombie
In this state the process, as the name suggests, is dead, meaning it has been stopped and still has an entry in the process table.



